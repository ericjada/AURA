import random
import discord
from discord.ext import commands
from datetime import datetime
import sqlite3

class Slots(commands.Cog):
    """
    A Discord cog that provides a slot machine game using AURAcoin.
    Users can bet AURAcoin and spin the slot machine to win more AURAcoin.
    """

    def __init__(self, bot):
        """
        Initialize the Slots cog.

        Args:
            bot: An instance of the Discord bot.
        """
        self.bot = bot
        self.conn = sqlite3.connect('./group_memories/aura_memory.db')

    @discord.app_commands.command(name="slots", description="Play the slot machine with AURAcoin betting.")
    @discord.app_commands.describe(amount="The amount of AURAcoin to bet.")
    async def slots(self, interaction: discord.Interaction, amount: int):
        """Allows a user to play the slot machine."""
        user = interaction.user
        user_id = user.id

        await interaction.response.defer(thinking=True)  # Show 'thinking' indicator

        # Check if the user has enough balance
        balance = self.get_auracoin_balance(user_id)
        if amount <= 0:
            await interaction.followup.send("You need to bet a positive amount of AURAcoin.")
            return
        if amount > balance:
            await interaction.followup.send(f"You have insufficient AURAcoin balance. Your balance is {balance} AC.")
            return

        # Deduct the bet amount from the user's balance
        new_balance = balance - amount
        timestamp = datetime.now().isoformat()
        with self.conn:
            self.conn.execute('''
                INSERT INTO auracoin_ledger (player_id, change_amount, balance, transaction_type, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, -amount, new_balance, 'slots_bet', timestamp))

        # Spin the slot machine
        emojis = ['üçí', 'üçã', 'üçä', 'üçâ', 'üçá', 'üîî', '‚≠ê', '7Ô∏è‚É£']
        reel1 = random.choice(emojis)
        reel2 = random.choice(emojis)
        reel3 = random.choice(emojis)
        result = [reel1, reel2, reel3]

        # Determine winnings
        winnings = self.calculate_winnings(result, amount)
        new_balance += winnings

        # Update the user's balance with winnings
        if winnings > 0:
            with self.conn:
                self.conn.execute('''
                    INSERT INTO auracoin_ledger (player_id, change_amount, balance, transaction_type, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, winnings, new_balance, 'slots_win', timestamp))

        # Prepare the result message
        slots_display = f"| {reel1} | {reel2} | {reel3} |"
        if winnings > 0:
            message = f"{slots_display}\nCongratulations! You won {winnings} AC!\nYour new balance is {new_balance} AC."
        else:
            message = f"{slots_display}\nSorry, you didn't win this time.\nYour new balance is {new_balance} AC."

        await interaction.followup.send(message)

        # Log the command usage
        self.log_command_usage(interaction, "slots", str(amount), f"Result: {slots_display} Winnings: {winnings} AC")

    def calculate_winnings(self, result, bet_amount):
        """Calculates the winnings based on the slot machine result."""
        # Define payouts
        payouts = {
            'üçí': 2,
            'üçã': 3,
            'üçä': 5,
            'üçâ': 10,
            'üçá': 15,
            'üîî': 20,
            '‚≠ê': 50,
            '7Ô∏è‚É£': 100
        }

        # If all three symbols match
        if result[0] == result[1] == result[2]:
            symbol = result[0]
            multiplier = payouts.get(symbol, 0)
            winnings = bet_amount * multiplier
            return winnings
        else:
            return 0

    def get_auracoin_balance(self, player_id):
        """Get the AURAcoin balance for a player."""
        cursor = self.conn.cursor()
        cursor.execute("SELECT balance FROM auracoin_ledger WHERE player_id = ? ORDER BY transaction_id DESC LIMIT 1", (player_id,))
        result = cursor.fetchone()
        return result[0] if result else 0

    def log_command_usage(self, interaction, command_name, input_data, output_data):
        """Logs the command usage to the database.

        Args:
            interaction: The interaction that triggered this command.
            command_name: The name of the command that was executed.
            input_data: The input provided by the user.
            output_data: The output generated by the command.
        """
        timestamp = datetime.now().isoformat()
        user_id = interaction.user.id
        guild_id = interaction.guild.id if interaction.guild else None
        username = interaction.user.name

        with self.conn:
            self.conn.execute('''
                INSERT INTO logs (log_type, log_message, timestamp, guild_id, user_id, username)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', ('COMMAND_USAGE', f"({username}) executed {command_name}.", timestamp, guild_id, user_id, username))

# Set up the cog
async def setup(bot):
    """Load the Slots cog into the bot.

    Args:
        bot: An instance of the Discord bot.
    """
    await bot.add_cog(Slots(bot))
